#pragma kernel SimulateRow
#pragma kernel InitState
#pragma kernel ResetState
#pragma kernel InitRulesLimitless
#include "../Common.cginc"

RWTexture2D<float> _StatesTex;
SamplerState sampler__StatesTex;
RWTexture2D<float4> _RenderTex;
RWTexture2D<float> _StatesTexTo;
RWStructuredBuffer<int> _Rules;
RWStructuredBuffer<int> _Rules2;

float4 _StateColors[32];
int _NumStates, _RowId, _Rez, _NeighbourhoodSize, _BufferSize, _GroupSize, _SeedRules, _InitRange, _Interval;
int _NumStates2, _NeighbourhoodSize2;
float _Seed, _Lambda;
bool _IsScrolling, _IsCenterOnly, _IsInterval, _UseTwoRules;


// uint Hash(uint s)
// {
//     s ^= 2747636419u;
//     s *= 2654435769u;
//     s ^= s >> 16;
//     s *= 2654435769u;
//     s ^= s >> 16;
//     s *= 2654435769u;
//     return s;
// }
//
// float Random(uint seed)
// {
//     return float(Hash(seed)) / 4294967295.0; // 2^32-1
// }

void RenderState(float state, int2 coord)
{
    _RenderTex[coord] = float4(_StateColors[state]);
}

[numthreads(16,16,1)]
void SimulateRow(uint3 id : SV_DispatchThreadID)
{
    if (!_IsScrolling && id.y > 0)
        return;

    if (id.x >= _Rez)
        return;        
    
    int nextState;
    bool isSecondRuleSet = _UseTwoRules && id.x > (float)_Rez / 2;
    
    int numStates = isSecondRuleSet ? _NumStates2 : _NumStates;
    int neighbourSize = isSecondRuleSet ? _NeighbourhoodSize2 : _NeighbourhoodSize;
    int samplingRange = neighbourSize / 2;
        
    if (!_IsScrolling || id.y == _RowId)
    {
        int rulesIdx = 0;  
        int rulesIdx2 = 0;  
        bool isAllDead = true;

        id.y = _RowId;
        
        for (int i = -samplingRange, currentSamplingIdx = 0; i <= samplingRange; i++, currentSamplingIdx++)
        {
            int x = id.x + i;
            if (x < 0)
                x = _Rez + x;
            else
                x = x % _Rez;

            int currentVal = _StatesTex[int2(x, id.y)];
            if (currentVal != numStates - 1)
                isAllDead = false;
            
            rulesIdx += pow(numStates, currentSamplingIdx) * currentVal;
        }

        for (int i = samplingRange, currentSamplingIdx = 0; i >= -samplingRange; i--, currentSamplingIdx++)
        {
            int x = id.x + i;
            if (x < 0)
                x = _Rez + x;
            else
                x = x % _Rez;

            int currentVal = _StatesTex[int2(x, id.y)];
            if (currentVal != numStates - 1)
                isAllDead = false;
            
            rulesIdx2 += pow(numStates, currentSamplingIdx) * currentVal;
        }

        rulesIdx = min(rulesIdx, rulesIdx2);

        if (rulesIdx >= pow(numStates, neighbourSize))
        {
            rulesIdx = Random(float2(id.x * _Seed * 0.001, RandomHash(_SeedRules) / id.x * 0.01)).x * pow(numStates, neighbourSize);
        }
        
        if (isAllDead)
            nextState = numStates - 1;
        else
            nextState = isSecondRuleSet ? _Rules2[rulesIdx] : _Rules[rulesIdx];       

        if (!_IsScrolling)
        {
            id.y += 1;
            _StatesTex[id.xy] = nextState;
        }
        else
            _StatesTexTo[id.xy] = nextState;

        RenderState(nextState, id.xy);
    }
    else
    {
        int2 nextRow = int2(id.x, id.y + 1);
        nextState = _StatesTex[nextRow];
        _StatesTexTo[id.xy] = nextState;
        RenderState(nextState, id.xy);
    }    
}

[numthreads(16,1,1)]
void InitState(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Rez)
        return;

    
    bool isSecondRuleSet = _UseTwoRules && id.x > (float)_Rez / 2;
    int numStates = isSecondRuleSet ? _NumStates2 : _NumStates;
    
    float2 rnd = Random(float2(id.x * _Seed * 0.001, RandomHash(_SeedRules) / id.x * 0.01));
    uint state = rnd.x * numStates;
    
    if (_IsCenterOnly)
    {
        float range = (float)_InitRange / 2;
        float center = (float)_Rez / 2;
        float from = center - range;
        float to = center + range;
        if (id.x > to || id.x < from)
        {
            state = numStates - 1;
        }
    }
    else if(_IsInterval)
    {        
        if (!(id.x % _Interval <= _InitRange))
        {
            state = numStates - 1;
        }   
    }
            
    _StatesTex[id.xy] = state;
    RenderState(state, id.xy);
}

[numthreads(8,8,8)]
void InitRulesLimitless(uint3 id : SV_DispatchThreadID)
{
    float2 rnd = Random(float2((id.x + id.y) * RandomHash(_SeedRules) * 0.01, id.z * RandomHash(_SeedRules) * 0.01));

    int idx = id.x + _GroupSize * id.y + _GroupSize * _GroupSize * id.z;

    if(idx >= _BufferSize)
        return;
    
    if (rnd.y >= _Lambda)
        _Rules[idx] = _NumStates - 1;
    else
        _Rules[idx] = int(rnd.x * (_NumStates - 1));        
}

[numthreads(16,16,1)]
void ResetState(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Rez || id.y >= _Rez)
        return;
    
    if (id.y != 0)
    {
        RenderState(0, id.xy);
    }       
}