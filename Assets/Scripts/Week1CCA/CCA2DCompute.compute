#pragma kernel ResetKernel
#pragma kernel StepKernel
#pragma kernel SecondaryNoiseKernel

Texture2D<float> readTex;
SamplerState sampler_readTex;

RWTexture2D<float> writeTex;
RWTexture2D<float4> outTex;

int range;
uint threshold;
uint nstates;
bool moore;

int rez;

float4 colors[21];

/*
 *
 *
 *  RESET
 *
 *
 */


 // via "The Art of Code" on Youtube
float2 Random(float2 p) {
	float3 a = frac(p.xyx * float3(123.34, 234.34, 345.65));
	a += dot(a, a + 34.45);
	return frac(float2(a.x * a.y, a.y * a.z));
}

[numthreads(1, 1, 1)]
void ResetKernel(uint3 id : SV_DispatchThreadID)
{
	writeTex[id.xy] = (int)(Random(id.xy*.01).x * nstates);
}


/*
 *
 *
 *  STEP
 *
 *
 */

 //  Function from Iñigo Quiles
 //  https://www.shadertoy.com/view/MsS3Wc
 //  via: https://thebookofshaders.com/06/
float4 hsb2rgb(float3 c) {
	float3 rgb = clamp(abs(((c.x * 6.0 + float3(0.0, 4.0, 2.0)) % 6.0) - 3.0) - 1.0, 0.0, 1.0);
	rgb = rgb * rgb * (3.0 - 2.0 * rgb);
	float3 o = c.z * lerp(float3(1.0, 1.0, 1.0), rgb, c.y);
	return float4(o.r, o.g, o.b, 1);
}

void Render(uint3 id, float state, int count) {
	float s = state / (float)nstates;
	float c = count / ((float)threshold);
	////////////////////////////////////////////
	// Basic
	if (true) {
		outTex[id.xy] = s;
	}

	// Fade Basic
	if (false) {
		outTex[id.xy] *= .4;
		outTex[id.xy] += s;
	}

	// Count
	if (false) {
		outTex[id.xy] = c;
	}

	// Fade count
	if (false) {
		outTex[id.xy] *= .3;
		outTex[id.xy] += c;
	}


	////////////////////////////////////////////
	float3 hsb = float3(0, .9, 1);

	// Basic Color
	if (false) {
		hsb.x = s;
		outTex[id.xy] = hsb2rgb(hsb);
	}

	// Range Color
	if (false) {
		hsb.x = hsb.y = hsb.z = s;
		hsb.x = lerp(.3, .0, hsb.x);
		hsb.y += .7;
		hsb.z += .6;
		outTex[id.xy] = hsb2rgb(hsb);
	}

	// Fade Range Color
	if (false) {
		hsb.x = hsb.y = hsb.z = s;
		hsb.x = lerp(.3, .0, hsb.x);
		hsb.y += .7;
		hsb.z -= .5;
		hsb.z *= 5;
		hsb.z = clamp(hsb.z, 0, 1);
		outTex[id.xy] += hsb2rgb(hsb);
		outTex[id.xy] *= .7;
	}

	// Range Count Color
	if (false) {
		hsb.x = hsb.y = hsb.z = c;
		hsb.x = lerp(.7, .3, hsb.x);
		hsb.y += .7;
		hsb.z = clamp(hsb.z, 0, 1);
		outTex[id.xy] = hsb2rgb(hsb);
	}

	// TRY:
	// 3/15/19/M
	// Range Count Fade Color
	if (false) {
		hsb.x = hsb.y = hsb.z = c;
		//hsb.x = lerp(.4, 1, hsb.x);  	// 1/3/4 M
		hsb.x = lerp(0, .1, hsb.x);  	// 8/14/2/N
		hsb.y += .7;
		outTex[id.xy] += hsb2rgb(hsb);
		//outTex[id.xy] *= .90; // 1/3/4/M
		outTex[id.xy] *= .70;
	}

	// Preset index
	if (false) {
		outTex[id.xy] = colors[state];
	}

	////////////////////////////////////////////
	// Crop
	float d = distance(float2(rez / 2.0, rez / 2.0), id.xy) / (rez / 2.0);
	outTex[id.xy] *= smoothstep(.9, .8, d);
}

[numthreads(1, 1, 1)]
void StepKernel(uint3 id : SV_DispatchThreadID)
{
	// READ STATE
	uint state = readTex[id.xy];

	uint count = 0;
	uint next = state + 1 == nstates ? 0 : state + 1; // (preserves higher states)

	// DETERMINE WHETHER EACH DIRECTION CONTAINS NEXT 
	for (int x = -range; x <= range; x++) {
		for (int y = -range; y <= range; y++) {

			// ignore self
			if ((x == 0 && y == 0)) {
				continue;
			}

			if (moore || (x == 0 || y == 0)) {
				//count += (uint) readTex[id.xy + int2(x, y)] == next;
				uint s = readTex.SampleLevel(sampler_readTex, (id.xy + int2(x, y)) / (float)rez, 0);
				count += (uint) (s == next);
			}
		}
	}

	// IF THRESHOLD IS REACHED, INCREMENT STEP
	if (count >= (threshold)) {
		state = (state + 1) % nstates;
	}

	// WRITE STATE
	writeTex[id.xy] = state;

	Render(id, state, count);
}


[numthreads(1, 1, 1)]
void SecondaryNoiseKernel(uint3 id : SV_DispatchThreadID)
{
	// if the state will not be a wall
	if ((uint) readTex[id.xy] < (uint) nstates) {
		// add noise
		writeTex[id.xy] = (int)(Random(id.xy).x * nstates);
	}
}

