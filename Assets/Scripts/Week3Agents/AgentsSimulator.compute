#pragma kernel Render
#pragma kernel Simulate
#pragma kernel ResetTexture
#pragma kernel ResetAgents
#pragma kernel MakeTrail
#pragma kernel DiffuseTexture

#include "../Common.cginc"

Texture2D<float> _ReadTex;
SamplerState sampler__ReadTex;

RWTexture2D<float4> _VizTex;
RWTexture2D<float> _WriteTex;
RWTexture2D<float> _StigmergyTex;

struct Agent
{
    float2 pos;
    float2 dir;
};

RWStructuredBuffer<Agent> _Agents;

int _Rez, _AgentCount, _Range, _DiffuseRange;
float _Time, _DirThreshold, _TrailDeposit, _TrailDecay;

float2 GetRandomPos(float x)
{
    return Random(float2(_Time * 0.001, x * 0.1 / _Time)) * (_Rez - 1);
}

float2 GetRandomDir(float2 id)
{
    float2 rnd = Random(id.xx * 0.1 + sin(_Time));
    return normalize(2 * rnd - 1);    
}

[numthreads(32,32,1)]
void Render (uint3 id : SV_DispatchThreadID)
{
    
    float trailVal = _StigmergyTex[id.xy];
    _VizTex[id.xy] = float4(trailVal, trailVal, trailVal, 1);    
}

[numthreads(64,1,1)]
void MakeTrail (uint3 id : SV_DispatchThreadID)
{
    float2 pos = _Agents[id.x].pos;
    pos = round(pos) % _Rez;
    _StigmergyTex[pos] = saturate(_StigmergyTex[pos] + _TrailDeposit);    
}

[numthreads(64,1,1)]
void Simulate (uint3 id : SV_DispatchThreadID)
{    
    Agent a = _Agents[id.x];
    float2 vectors[100];
    int i = 0;
    float maxVal = 0;
    
    for (int x = -_Range; x <= _Range; x++)
    {
        for (int y = -_Range; y <= _Range; y++)
        {
            if (x == 0 && y == 0)
                continue;

            float2 currentPos = a.pos + int2(x, y);
            float2 currentDir = normalize(currentPos - a.pos);

            if (dot(currentDir, a.dir) <= _DirThreshold)
            continue;
            
            float currentVal = _ReadTex.SampleLevel(sampler__ReadTex, round(currentPos) / _Rez, 0);

            if (currentVal > maxVal)
            {
                vectors[i++] = currentDir;
                maxVal = currentVal;
            }
        }
    }

    if (maxVal >= 0.1)
    {
        int idx = (i - 1) * Random(id.xx * 0.1 + sin(_Time)).x;
        a.dir += vectors[idx];
    }
    // else
    // {
    //     a.dir += GetRandomDir(id.xy);
    // }
        
    a.pos += normalize(a.dir);
    
    if(a.pos.x < 0)
        a.pos.x += _Rez;
    if(a.pos.y < 0)
        a.pos.y += _Rez;
    
    a.pos %= _Rez;  
    _Agents[id.x] = a;
}

[numthreads(32,32,1)]
void ResetTexture (uint3 id : SV_DispatchThreadID)
{    
    _WriteTex[id.xy] = 0;
}

[numthreads(64,1,1)]
void ResetAgents (uint3 id : SV_DispatchThreadID)
{
    Agent currentAgent;
    currentAgent.dir = GetRandomDir(id.x);
    currentAgent.pos = GetRandomPos(id.x);

    _Agents[id.x] = currentAgent;
}

[numthreads(32,32,1)]
void DiffuseTexture (uint3 id : SV_DispatchThreadID)
{
    float avg = 0;

    for (int x = -_DiffuseRange; x <= _DiffuseRange; x++)
    {
        for (int y = -_DiffuseRange; y <= _DiffuseRange; y++)
        {
            avg += _ReadTex.SampleLevel(sampler__ReadTex, (id.xy + float2(x, y)) / _Rez, 0);
        }
    }

    int sampledCellsCount = _DiffuseRange * 2 + 1;
    avg /= sampledCellsCount * sampledCellsCount;
    
    avg *= _TrailDecay;
    _StigmergyTex[id.xy] = saturate(avg);
}